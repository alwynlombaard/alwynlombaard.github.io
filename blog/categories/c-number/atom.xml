<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c# | Alwyn Lombaard's blog]]></title>
  <link href="http://blog.lombaard.co.uk/blog/categories/c-number/atom.xml" rel="self"/>
  <link href="http://blog.lombaard.co.uk/"/>
  <updated>2016-10-29T11:25:38+00:00</updated>
  <id>http://blog.lombaard.co.uk/</id>
  <author>
    <name><![CDATA[Alwyn Lombaard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to serialize and deserialize an iOS device token from NSData to String and back in Xamarin.iOS]]></title>
    <link href="http://blog.lombaard.co.uk/blog/2016/03/25/how-to-serialize-and-deserialize-an-ios-device-token-from-nsdata-to-string-and-back-in-xamarin-dot-ios/"/>
    <updated>2016-03-25T18:28:08+00:00</updated>
    <id>http://blog.lombaard.co.uk/blog/2016/03/25/how-to-serialize-and-deserialize-an-ios-device-token-from-nsdata-to-string-and-back-in-xamarin-dot-ios</id>
    <content type="html"><![CDATA[<p>Obtain the device token as usual when the user opts in to receive remote push notifications. Then convert it to a base64 string that can be stored and used later.</p>

<p>Here&rsquo;s how to do it. In your app delegate:</p>

<pre><code>public override void RegisteredForRemoteNotifications(UIApplication application, NSData deviceToken)
{
    var tokenStringBase64 = deviceToken.GetBase64EncodedString(NSDataBase64EncodingOptions.None);
    //now you can store it for later use in local storage
}
</code></pre>

<p>To convert it back into an NSData object that you can send to third parties (like MixPanel and ExactTarget) that require  the token as NSData:</p>

<pre><code>var deviceToken = new NSData(tokenStringBase64, NSDataBase64DecodingOptions.None);

Mixpanel.SharedInstance.People.AddPushDeviceToken(deviceToken);

ETPush.PushManager.RegisterDeviceToken(deviceToken);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin iOS swipable multiple step process used for onboarding]]></title>
    <link href="http://blog.lombaard.co.uk/blog/2015/10/27/xamarin-ios-swipable-multiple-step-process-used-for-onboarding/"/>
    <updated>2015-10-27T21:49:01+00:00</updated>
    <id>http://blog.lombaard.co.uk/blog/2015/10/27/xamarin-ios-swipable-multiple-step-process-used-for-onboarding</id>
    <content type="html"><![CDATA[<h3 id="the-requirement">The requirement</h3>


<p>I recently had to build an onboarding process in the JustGiving iOS app that consists
of a series of screens that can be navigated by swiping forward and backward.</p>

<p><a href="http://blog.lombaard.co.uk/images/onboarding/make-good-things-happen.png" target="_blank"><img src="/images/onboarding/make-good-things-happen.png" width="160" alt="Step 1" /></a>
<a href="http://blog.lombaard.co.uk/images/onboarding/fundraise.png" target="_blank"><img src="/images/onboarding/fundraise.png" width="160" alt="Step 2" /></a>
<a href="http://blog.lombaard.co.uk/images/onboarding/connect.png" target="_blank"><img src="/images/onboarding/connect.png" width="160" alt="Step 3" /></a>
<a href="http://blog.lombaard.co.uk/images/onboarding/discover.png" target="_blank"><img src="/images/onboarding/discover.png" width="160" alt="Step 4" /></a>
<a href="http://blog.lombaard.co.uk/images/onboarding/get-started.png" target="_blank"><img src="/images/onboarding/get-started.png" width="160" alt="Step 5" /></a></p>

<h3 id="the-solution">The solution</h3>


<p>I used a <code>UIPageViewController</code> with a <code>UIPageViewControllerDataSource</code> for navigating through steps
and a <code>UIPageControl</code> for the progress indicator.</p>

<h3 id="endresult">The end result</h3>


<p><video controls preload="false">
   <source src="http://blog.lombaard.co.uk/video/onboarding.mp4" type="video/mp4">
</video></p>

<h3 id="steps">Steps</h3>


<p>Each step is a <code>UIViewController</code> that implements the following interface.</p>

<pre><code>public interface IMultiStepProcessStep : IDisposable
{
    int StepIndex { get; set; }
    event EventHandler&lt;MultiStepProcessStepEventArgs&gt; StepActivated;
    event EventHandler&lt;MultiStepProcessStepEventArgs&gt; StepDeactivated;
}


public class MultiStepProcessStepEventArgs
{
    public int Index { get; set; }
}
</code></pre>

<h3 id="UIViewController">UIViewController step</h3>


<p></p>

<p>A step publishes its index when it is activated or de-activated as the active step.
This is done in <code>ViewDidAppear</code> and <code>ViewWillDisappear</code>.</p>

<pre><code>public class MakeGoodthingsHappenStep : UIViewController, IMultiStepProcessStep
{
    public override void ViewDidAppear(bool animated)
    {
        base.ViewDidAppear(animated);
        StepActivated?.Invoke(this, new MultiStepProcessStepEventArgs { Index = StepIndex });
    }

    public override void ViewWillDisappear(bool animated)
    {
        base.ViewWillDisappear(animated);
        StepDeactivated?.Invoke(this, new MultiStepProcessStepEventArgs { Index = StepIndex });
    }

    public int StepIndex { get; set; }
    public event EventHandler&lt;MultiStepProcessStepEventArgs&gt; StepActivated;
    public event EventHandler&lt;MultiStepProcessStepEventArgs&gt; StepDeactivated;
}
</code></pre>

<h3 id="UIPageViewControllerDataSource">UIPageViewControllerDataSource</h3>


<p>The data source is a <code>UIPageViewControllerDataSource</code> that is constructed with a list of <code>IMultiStepProcessStep</code> steps.</p>

<pre><code>public class MultiStepProcessDataSource : UIPageViewControllerDataSource
{
    private readonly List&lt;IMultiStepProcessStep&gt; _steps;

    public MultiStepProcessDataSource(List&lt;IMultiStepProcessStep&gt; steps)
    {
        if (steps == null)
        {
          throw new ArgumentNullException(nameof(steps));
        }
        if (!steps.Any())
        {
            throw new ArgumentException("steps cannot be empty.", nameof(steps));
        }
        if (steps.Any(s =&gt; !(s is UIViewController)))
        {
            throw new ArgumentException("all steps must be a UIViewController", nameof(steps));
        }

        _steps = steps;

        for (int i = 0; i &lt; _steps.Count; i++)
        {
            var step = _steps[i];
            step.StepIndex = i;
        }
    }

    public List&lt;IMultiStepProcessStep&gt; Steps =&gt; _steps;

    public override UIViewController GetPreviousViewController(UIPageViewController pageViewController,
        UIViewController referenceViewController)
    {
        var step = referenceViewController as IMultiStepProcessStep;
        if (step == null)
        {
            return null;
        }

        var index = _steps.IndexOf(step);
        if (index &lt;= 0)
        {
            return null;
        }

        return   _steps[index - 1] as UIViewController;
    }

    public override UIViewController GetNextViewController(UIPageViewController pageViewController, 
                                                           UIViewController referenceViewController)
    {
        var step = referenceViewController as IMultiStepProcessStep;
        if (step == null)
        {
            return null;
        }
        var index = _steps.IndexOf(step);
        if (index + 1 == _steps.Count)
        {
            return null;
        }

        return _steps[(step.StepIndex + 1)] as UIViewController;
    }
}   
</code></pre>

<h3 id="UIPageViewController">UIPageViewController</h3>


<p>The <code>UIPageViewController</code> is constructed from the data source.</p>

<pre><code>public sealed class MultiStepProcessHorizontal : UIPageViewController
{
    public MultiStepProcessHorizontal(MultiStepProcessDataSource dataSource) 
        :base(UIPageViewControllerTransitionStyle.Scroll, 
              UIPageViewControllerNavigationOrientation.Horizontal)
    {
        DataSource = dataSource;
        SetViewControllers(new[] {dataSource.Steps.FirstOrDefault() as UIViewController}, 
                           UIPageViewControllerNavigationDirection.Forward, 
                           false, 
                           null);
    }
} 
</code></pre>

<h3 id="UIPageControl">UIPageControl</h3>


<p>A  <code>UIPageControl</code> is used to indicate which step is active.</p>

<p><img src="/images/onboarding/UIPageControl.png" alt="UIPageControl" /></p>

<h3 id="putting-it-all-together">Putting it all together in the OnBoardingViewController</h3>


<p>The event handlers for when a step is activated and de-activated are used to set the current page index
and to update any other parts of the UI as needed.</p>

<pre><code>private void HandleStepActivated(object sender, MultiStepProcessStepEventArgs args)
{
    _pageControl.CurrentPage =  args.Index;
}

private void HandleStepDeactivated(object sender, MultiStepProcessStepEventArgs args)
{
    //update the UI as required while transitioning between steps
}
</code></pre>

<p>Get the steps that form part of the process and wire them up to <code>StepActivated</code> and <code>StepDeactivated</code> events.</p>

<pre><code>private List&lt;IMultiStepProcessStep&gt; GetSteps()
{
    var steps = new List&lt;IMultiStepProcessStep&gt;()
        {
            new MakeGoodthingsHappenStep(),
            new FundraiseStep(),
            new ConnectStep(),
            new DiscoverStep(),
            new GetStartedStep()
        };

    steps.ForEach(s =&gt; 
    {
        s.StepActivated += HandleStepActivated;
        s.StepDeactivated += HandleStepDeactivated;
    });

    return steps;
}
</code></pre>

<p>Setup and add the <code>UIPageViewController</code> and <code>UIPageControl</code> controls to the view.</p>

<pre><code>private MultiStepProcessHorizontal _pageViewController;
private UIPageControl _pageControl;

private List&lt;IMultiStepProcessStep&gt; _steps;
public List&lt;IMultiStepProcessStep&gt; Steps =&gt; _steps ?? (_steps = GetSteps());

public override void LoadView()
    {
        View = new UIView();

        _pageViewController = new MultiStepProcessHorizontal(new MultiStepProcessDataSource(Steps));

        _pageControl = new UIPageControl
            {
                CurrentPage = 0,
                Pages = Steps.Count
            };

        View.Add(_pageViewController.View);
        View.Add(_pageControl);
}
</code></pre>

<ul>
<li><a href="#the-requirement">The requirement</a></li>
<li><a href="#the-solution">The solution</a></li>
<li><a href="#endresult">The end result</a></li>
<li><a href="#steps">Steps</a></li>
<li><a href="#UIViewController">UIViewController step</a></li>
<li><a href="#UIPageViewControllerDataSource">UIPageViewControllerDataSource</a></li>
<li><a href="#UIPageViewController">UIPageViewController</a></li>
<li><a href="#UIPageControl">UIPageControl</a></li>
<li><a href="#putting-it-all-together">Putting it all together in the OnBoardingViewController</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
