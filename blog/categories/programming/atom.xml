<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Alwyn Lombaard's blog]]></title>
  <link href="http://blog.lombaard.co.uk/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://blog.lombaard.co.uk/"/>
  <updated>2015-10-28T08:05:43+00:00</updated>
  <id>http://blog.lombaard.co.uk/</id>
  <author>
    <name><![CDATA[Alwyn Lombaard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xamarin iOS swipable multiple step process used for onboarding]]></title>
    <link href="http://blog.lombaard.co.uk/blog/2015/10/27/xamarin-ios-swipable-multiple-step-process-used-for-onboarding/"/>
    <updated>2015-10-27T21:49:01+00:00</updated>
    <id>http://blog.lombaard.co.uk/blog/2015/10/27/xamarin-ios-swipable-multiple-step-process-used-for-onboarding</id>
    <content type="html"><![CDATA[<h3 id="the-requirement">The requirement</h3>


<p>I recently had to build an onboarding process in the JustGiving iOS app that consists
of a series of screens that can be navigated by swiping forward and backward.</p>

<p><a href="http://blog.lombaard.co.uk/images/onboarding/make-good-things-happen.png" target="_blank"><img src="/images/onboarding/make-good-things-happen.png" width="160" alt="Step 1" /></a>
<a href="http://blog.lombaard.co.uk/images/onboarding/fundraise.png" target="_blank"><img src="/images/onboarding/fundraise.png" width="160" alt="Step 2" /></a>
<a href="http://blog.lombaard.co.uk/images/onboarding/connect.png" target="_blank"><img src="/images/onboarding/connect.png" width="160" alt="Step 3" /></a>
<a href="http://blog.lombaard.co.uk/images/onboarding/discover.png" target="_blank"><img src="/images/onboarding/discover.png" width="160" alt="Step 4" /></a>
<a href="http://blog.lombaard.co.uk/images/onboarding/get-started.png" target="_blank"><img src="/images/onboarding/get-started.png" width="160" alt="Step 5" /></a></p>

<h3 id="the-solution">The solution</h3>


<p>I used a <code>UIPageViewController</code> with a <code>UIPageViewControllerDataSource</code> for navigating through steps
and a <code>UIPageControl</code> for the progress indicator.</p>

<h3 id="endresult">The end result</h3>


<p><video controls preload="false">
   <source src="http://blog.lombaard.co.uk/video/onboarding.mp4" type="video/mp4">
</video></p>

<h3 id="steps">Steps</h3>


<p>Each step is a <code>UIViewController</code> that implements the following interface.</p>

<pre><code>public interface IMultiStepProcessStep : IDisposable
{
    int StepIndex { get; set; }
    event EventHandler&lt;MultiStepProcessStepEventArgs&gt; StepActivated;
    event EventHandler&lt;MultiStepProcessStepEventArgs&gt; StepDeactivated;
}


public class MultiStepProcessStepEventArgs
{
    public int Index { get; set; }
}
</code></pre>

<h3 id="UIViewController">UIViewController step</h3>


<p></p>

<p>A step publishes its index when it is activated or de-activated as the active step.
This is done in <code>ViewDidAppear</code> and <code>ViewWillDisappear</code>.</p>

<pre><code>public class MakeGoodthingsHappenStep : UIViewController, IMultiStepProcessStep
{
    public override void ViewDidAppear(bool animated)
    {
        base.ViewDidAppear(animated);
        StepActivated?.Invoke(this, new MultiStepProcessStepEventArgs { Index = StepIndex });
    }

    public override void ViewWillDisappear(bool animated)
    {
        base.ViewWillDisappear(animated);
        StepDeactivated?.Invoke(this, new MultiStepProcessStepEventArgs { Index = StepIndex });
    }

    public int StepIndex { get; set; }
    public event EventHandler&lt;MultiStepProcessStepEventArgs&gt; StepActivated;
    public event EventHandler&lt;MultiStepProcessStepEventArgs&gt; StepDeactivated;
}
</code></pre>

<h3 id="UIPageViewControllerDataSource">UIPageViewControllerDataSource</h3>


<p>The data source is a <code>UIPageViewControllerDataSource</code> that is constructed with a list of <code>IMultiStepProcessStep</code> steps.</p>

<pre><code>public class MultiStepProcessDataSource : UIPageViewControllerDataSource
{
    private readonly List&lt;IMultiStepProcessStep&gt; _steps;

    public MultiStepProcessDataSource(List&lt;IMultiStepProcessStep&gt; steps)
    {
        if (steps == null)
        {
          throw new ArgumentNullException(nameof(steps));
        }
        if (!steps.Any())
        {
            throw new ArgumentException("steps cannot be empty.", nameof(steps));
        }
        if (steps.Any(s =&gt; !(s is UIViewController)))
        {
            throw new ArgumentException("all steps must be a UIViewController", nameof(steps));
        }

        _steps = steps;

        for (int i = 0; i &lt; _steps.Count; i++)
        {
            var step = _steps[i];
            step.StepIndex = i;
        }
    }

    public List&lt;IMultiStepProcessStep&gt; Steps =&gt; _steps;

    public override UIViewController GetPreviousViewController(UIPageViewController pageViewController,
        UIViewController referenceViewController)
    {
        var step = referenceViewController as IMultiStepProcessStep;
        if (step == null)
        {
            return null;
        }

        var index = _steps.IndexOf(step);
        if (index &lt;= 0)
        {
            return null;
        }

        return   _steps[index - 1] as UIViewController;
    }

    public override UIViewController GetNextViewController(UIPageViewController pageViewController, 
                                                           UIViewController referenceViewController)
    {
        var step = referenceViewController as IMultiStepProcessStep;
        if (step == null)
        {
            return null;
        }
        var index = _steps.IndexOf(step);
        if (index + 1 == _steps.Count)
        {
            return null;
        }

        return _steps[(step.StepIndex + 1)] as UIViewController;
    }
}   
</code></pre>

<h3 id="UIPageViewController">UIPageViewController</h3>


<p>The <code>UIPageViewController</code> is constructed from the data source.</p>

<pre><code>public sealed class MultiStepProcessHorizontal : UIPageViewController
{
    public MultiStepProcessHorizontal(MultiStepProcessDataSource dataSource) 
        :base(UIPageViewControllerTransitionStyle.Scroll, 
              UIPageViewControllerNavigationOrientation.Horizontal)
    {
        DataSource = dataSource;
        SetViewControllers(new[] {dataSource.Steps.FirstOrDefault() as UIViewController}, 
                           UIPageViewControllerNavigationDirection.Forward, 
                           false, 
                           null);
    }
} 
</code></pre>

<h3 id="UIPageControl">UIPageControl</h3>


<p>A  <code>UIPageControl</code> is used to indicate which step is active.</p>

<p><img src="/images/onboarding/UIPageControl.png" alt="UIPageControl" /></p>

<h3 id="putting-it-all-together">Putting it all together in the OnBoardingViewController</h3>


<p>The event handlers for when a step is activated and de-activated are used to set the current page index
and to update any other parts of the UI as needed.</p>

<pre><code>private void HandleStepActivated(object sender, MultiStepProcessStepEventArgs args)
{
    _pageControl.CurrentPage =  args.Index;
}

private void HandleStepDeactivated(object sender, MultiStepProcessStepEventArgs args)
{
    //update the UI as required while transitioning between steps
}
</code></pre>

<p>Get the steps that form part of the process and wire them up to <code>StepActivated</code> and <code>StepDeactivated</code> events.</p>

<pre><code>private List&lt;IMultiStepProcessStep&gt; GetSteps()
{
    var steps = new List&lt;IMultiStepProcessStep&gt;()
        {
            new MakeGoodthingsHappenStep(),
            new FundraiseStep(),
            new ConnectStep(),
            new DiscoverStep(),
            new GetStartedStep()
        };

    steps.ForEach(s =&gt; 
    {
        s.StepActivated += HandleStepActivated;
        s.StepDeactivated += HandleStepDeactivated;
    });

    return steps;
}
</code></pre>

<p>Setup and add the <code>UIPageViewController</code> and <code>UIPageControl</code> controls to the view.</p>

<pre><code>private MultiStepProcessHorizontal _pageViewController;
private UIPageControl _pageControl;

private List&lt;IMultiStepProcessStep&gt; _steps;
public List&lt;IMultiStepProcessStep&gt; Steps =&gt; _steps ?? (_steps = GetSteps());

public override void LoadView()
    {
        View = new UIView();

        _pageViewController = new MultiStepProcessHorizontal(new MultiStepProcessDataSource(Steps));

        _pageControl = new UIPageControl
            {
                CurrentPage = 0,
                Pages = Steps.Count
            };

        View.Add(_pageViewController.View);
        View.Add(_pageControl);
}
</code></pre>

<ul>
<li><a href="#the-requirement">The requirement</a></li>
<li><a href="#the-solution">The solution</a></li>
<li><a href="#endresult">The end result</a></li>
<li><a href="#steps">Steps</a></li>
<li><a href="#UIViewController">UIViewController step</a></li>
<li><a href="#UIPageViewControllerDataSource">UIPageViewControllerDataSource</a></li>
<li><a href="#UIPageViewController">UIPageViewController</a></li>
<li><a href="#UIPageControl">UIPageControl</a></li>
<li><a href="#putting-it-all-together">Putting it all together in the OnBoardingViewController</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A simple Angular audio playlist]]></title>
    <link href="http://blog.lombaard.co.uk/blog/2015/10/13/a-simple-angular-audio-playlist/"/>
    <updated>2015-10-13T20:34:45+00:00</updated>
    <id>http://blog.lombaard.co.uk/blog/2015/10/13/a-simple-angular-audio-playlist</id>
    <content type="html"><![CDATA[<p>I recently knocked out this Angular.js app to put my recordings in a playlist.</p>

<p>You can play with it <a href="/playlist">here</a>.</p>

<h3>The markup</h3>

<pre><code>&lt;div class="playlist" ng-app="playListApp" ng-controller="playListController"&gt;
    &lt;h2&gt;Track: {{selectedTrack().name}}&lt;/h2&gt;
    &lt;audio preload="false" id="playlist-audio" controls="controls" width="300"&gt;&lt;/audio&gt;
    &lt;div id="extra-controls"&gt;
        &lt;button id="btnPrev" class="ctrlbtn" ng-click="previous()"&gt;|&amp;lt;&amp;lt; Prev Track&lt;/button&gt; 
        &lt;button id="btnNext" class="ctrlbtn" ng-click="next()"&gt;Next Track &amp;gt;&amp;gt;|&lt;/button&gt;
    &lt;/div&gt;
    &lt;h3&gt;Playlist&lt;/h3&gt;
    &lt;ul&gt;
        &lt;li class="track" ng-repeat="track in tracks" ng-class="{active:selectedIndex == $index}" ng-click="loadTrack($index)"&gt;
            {{track.track}}. {{track.name}} - {{track.length}}
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
</code></pre>

<h3>The JavaScript</h3>

<pre><code>'use strict';

(function(global) {
    var app = angular.module('playListApp', []);

    app.factory('audio', function($document) {
        var audio = $document[0].getElementById('playlist-audio');
        return audio;
    });

    global.playListController = function ($scope, audio){
        $scope.mediaPath = '/music/';
        $scope.playing = false;
        $scope.selectedIndex = 0;
        $scope.tracks = [
            {'track':1,'name':'Brouwer Study No 1','length':'01:06','file':'Brouwer_Study_No_1_20150919_182834.mp3'},
            {'track':2,'name':'Brouwer Study No 2','length':'01:10','file':'Brouwer_Study_No_2_20151004_140303.mp3'},
            {'track':3,'name':'Brouwer Study No 3','length':'00:48','file':'Brouwer_Study_No_3_20151007_214619.mp3'},
            {'track':4,'name':'Brouwer Study No 4','length':'00:48','file':'Brouwer_Study_No_4_20151008_212308.mp3'},
            {'track':5,'name':'Brouwer Study No 5','length':'01:08','file':'Brouwer_Study_No_5_20151011_150048.mp3'},
            {'track':6,'name':'Brouwer Study No 6','length':'01:31','file':'Brouwer_Study_No_6_20151010_132529.mp3'}];
        $scope.trackCount = $scope.tracks.length;
        $scope.selectedTrack = function(){ return $scope.tracks[$scope.selectedIndex]};
        $scope.audioSource = function (){return $scope.mediaPath + $scope.selectedTrack().file;};
        audio.src = $scope.audioSource();
        $scope.loadTrack = function(index) {
            $scope.selectedIndex = index;
            audio.src = $scope.audioSource();
            if($scope.playing){
                audio.play();
            }
        }
        $scope.previous = function(){
            $scope.selectedIndex--;
            $scope.selectedIndex = ($scope.selectedIndex &lt; 0 ? $scope.tracks.length - 1 : $scope.selectedIndex);
            audio.src = $scope.audioSource();

            if($scope.playing){
                audio.play();
            }
        };
        $scope.next = function(){
            $scope.selectedIndex++;
            $scope.selectedIndex = ($scope.selectedIndex &gt;=  $scope.tracks.length ? 0 : $scope.selectedIndex);
            audio.src = $scope.audioSource();
            if($scope.playing){
                audio.play();
            }
        };
        audio.addEventListener('play', function() {
            $scope.$apply(function(){
                $scope.playing = true;
            });
        }, false);
        audio.addEventListener('pause', function() {
            $scope.$apply(function(){
                $scope.playing = false;
            });
        }, false);
        audio.addEventListener('ended', function() {
            $scope.$apply(function(){
                if(($scope.selectedIndex + 1) === $scope.tracks.length){
                    $scope.playing = false;
                    $scope.selectedIndex = 0;
                    audio.src = $scope.audioSource();
                }
                else{
                    $scope.playing = true;
                    $scope.next();
                }
            });
        }, false);
    }
})(this);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use the ExactTarget SOAP API to setup and send a transactional email in .Net without logging into ExactTarget]]></title>
    <link href="http://blog.lombaard.co.uk/blog/2014/06/26/how-to-use-the-exacttarget-soap-api-to-setup-and-send-a-transactional-email-in-dot-net-without-logging-into-exacttarget/"/>
    <updated>2014-06-26T14:07:00+00:00</updated>
    <id>http://blog.lombaard.co.uk/blog/2014/06/26/how-to-use-the-exacttarget-soap-api-to-setup-and-send-a-transactional-email-in-dot-net-without-logging-into-exacttarget</id>
    <content type="html"><![CDATA[<p>I recently had to use the ExaxtTarget SOAP API to send transactional emails from a website but setting up a new  one required me to log in to ExactTarget and shaving yaks called &ldquo;Data Extension&rdquo;, &ldquo;Triggered Send&rdquo;, &ldquo;Triggered Send Definition&rdquo;, &ldquo;Delivery Profile&rdquo;, &ldquo;Email Templates&rdquo; etc..</p>

<p>I just wanted to be able to send a simple transactional email without first having to perform a number of steps in the cumbersome ExactTarget UI &hellip;.so I created a library to make my life easier when I need to set up a new transactional email. I hope this can help some poor soul out there suffering the same fate I have.</p>

<p>Here is how you can set up a new transactional email by using my library.</p>

<h2>Getting started</h2>

<p>I assume you have received API user credentials from ExactTarget to use with the SOAP API. I also assume you have logged into ExactTarget and have heard about &ldquo;Triggered Sends&rdquo; and &ldquo;Data Extensions&rdquo;.</p>

<h2>Step 1: Install from Nuget</h2>

<p><div><script src='https://gist.github.com/83bf27007bf84e63ceb9.js?file=Install'></script>
<noscript><pre><code>PM&gt; Install-Package ExactTarget.TriggerEmailSender</code></pre></noscript></div>
</p>

<h2>Step 2: Create</h2>

<p>You only need to do this once for the type of email you wish to send with tracking. (For example order confirmation emails, welcome after registration emails, order dispatched emails etc)</p>

<p>You have two choices, you can create a &ldquo;Triggered send&rdquo; with a</p>

<ol>
<li>&ldquo;PasteHtml&rdquo; email or</li>
<li>Templated email</li>
</ol>


<p><div><script src='https://gist.github.com/83bf27007bf84e63ceb9.js?file=Config.cs'></script>
<noscript><pre><code>var config = new ExactTargetConfiguration
{
  ApiUserName = &quot;API_User&quot;,
  ApiPassword = &quot;API_Password&quot;,
  //use your endpoint given to you by ET
  EndPoint = &quot;https://webservice.s6.exacttarget.com/Service.asmx&quot;,
  ClientId = 6269485//optional: business unit id you wish to use
};</code></pre></noscript></div>
</p>

<h3>Create &ldquo;PasteHtml&rdquo; email</h3>

<p><div><script src='https://gist.github.com/83bf27007bf84e63ceb9.js?file=CreatePasteHtml.cs'></script>
<noscript><pre><code>//create and start a transactional Triggered Send (only required to do this once)
try
{
  var triggeredEmailCreator = new TriggeredEmailCreator(config);
  
  triggeredEmailCreator.CreateTriggeredSendDefinitionWithPasteHtml(&quot;order-comfirmation&quot;);
  
  triggeredEmailCreator.StartTriggeredSend(&quot;order-comfirmation&quot;);
}
catch(Exception ex)
{
  //you better handle exceptions here
}</code></pre></noscript></div>
</p>

<h3>Create Templated email</h3>

<p><div><script src='https://gist.github.com/83bf27007bf84e63ceb9.js?file=CreateTemplate.cs'></script>
<noscript><pre><code>try
{
  var triggeredEmailCreator = new TriggeredEmailCreator(config);
  
  triggeredEmailCreator.CreateTriggeredSendDefinitionWithEmailTemplate(
                          &quot;order-dispatched&quot;,
                          &quot;&lt;html&gt;&lt;head&gt;&lt;style&gt;.red{color:red}&lt;/style&gt;&lt;/head&gt;&quot;, 
                          &quot;&lt;/html&gt;&quot;);
  
  triggeredEmailCreator.StartTriggeredSend(&quot;order-dispatched&quot;);
}
catch(Exception ex)
{
  //you better handle exceptions here
}</code></pre></noscript></div>
</p>

<h2>Sending an email</h2>

<h3>Sending &ldquo;PasteHtml&rdquo; email</h3>

<p>If you&rsquo;ve created a &ldquo;PasteHTML&rdquo; email, you supply replacement values to use for the email for:</p>

<ol>
<li>Subject</li>
<li>Body</li>
<li>Head (optional)</li>
</ol>


<p><div><script src='https://gist.github.com/83bf27007bf84e63ceb9.js?file=Config.cs'></script>
<noscript><pre><code>var config = new ExactTargetConfiguration
{
  ApiUserName = &quot;API_User&quot;,
  ApiPassword = &quot;API_Password&quot;,
  //use your endpoint given to you by ET
  EndPoint = &quot;https://webservice.s6.exacttarget.com/Service.asmx&quot;,
  ClientId = 6269485//optional: business unit id you wish to use
};</code></pre></noscript></div>
</p>

<p><div><script src='https://gist.github.com/83bf27007bf84e63ceb9.js?file=SendPasteHtml.cs'></script>
<noscript><pre><code>//trigger an email
try
{
  var triggeredEmail = new ExactTargetTriggeredEmail(&quot;order-comfirmation&quot;, 
                        &quot;recipient@temp.uri&quot;);
  triggeredEmail.AddReplacementValue(&quot;Subject&quot;,&quot;Thank you for placing your order&quot;);
  triggeredEmail.AddReplacementValue(&quot;Body&quot;,
    &quot;&lt;p&gt;Your order has been processed&lt;/p&gt;&quot; +
    &quot;&lt;p class='green'&gt;This email is a PasteHtml email&lt;/p&gt;&quot;);
  triggeredEmail.AddReplacementValue(&quot;Head&quot;,&quot;&lt;style&gt;.green{color:green}&lt;/style&gt;&quot;);


  var emailTrigger = new EmailTrigger(config);
  emailTrigger.Trigger(triggeredEmail);
}
catch(Exception ex)
{
  //you better handle exceptions here
}</code></pre></noscript></div>
</p>

<h3>Sending Templated email</h3>

<p>If you&rsquo;ve created a templated email, you supply replacement values to use for the email for:</p>

<ol>
<li>Subject</li>
<li>Body</li>
</ol>


<p><div><script src='https://gist.github.com/83bf27007bf84e63ceb9.js?file=Config.cs'></script>
<noscript><pre><code>var config = new ExactTargetConfiguration
{
  ApiUserName = &quot;API_User&quot;,
  ApiPassword = &quot;API_Password&quot;,
  //use your endpoint given to you by ET
  EndPoint = &quot;https://webservice.s6.exacttarget.com/Service.asmx&quot;,
  ClientId = 6269485//optional: business unit id you wish to use
};</code></pre></noscript></div>
</p>

<p><div><script src='https://gist.github.com/83bf27007bf84e63ceb9.js?file=SendTemplate.cs'></script>
<noscript><pre><code>try
{
  var triggeredEmail = new ExactTargetTriggeredEmail(&quot;order-dispatched&quot;, 
                                          &quot;recipient@temp.uri&quot;);
  triggeredEmail.AddReplacementValue(&quot;Subject&quot;,&quot;Your order has been dispatched&quot;);
  triggeredEmail.AddReplacementValue(&quot;Body&quot;, 
      &quot;&lt;p&gt;Your order has been dispatched!&lt;/p&gt;&quot; + 
      &quot;&lt;p class='red'&gt;This email is a templated email&lt;/p&gt;&quot;);
  
  var emailTrigger = new EmailTrigger(config);
  emailTrigger.Trigger(triggeredEmail);
}
catch(Exception ex)
{
  //you better handle exceptions here
}</code></pre></noscript></div>
</p>

<h2>Links</h2>

<p><a href="http://exacttarget.lombaard.co.uk/">Project site</a></p>
]]></content>
  </entry>
  
</feed>
