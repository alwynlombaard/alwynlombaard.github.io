<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-09-22T19:08:03+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Alwyn Lombaard’s blog</title><subtitle>Mobile developer (guitar student and athlete in my spare time)</subtitle><entry><title type="html">My humble attempt at Bach Prelude for Lute BWV999</title><link href="http://localhost:4000/music/guitar/2018/04/15/my-humble-attempt-at-bach-prelude-for-lute-bwv999.html" rel="alternate" type="text/html" title="My humble attempt at Bach Prelude for Lute BWV999" /><published>2018-04-15T16:17:08+01:00</published><updated>2018-04-15T16:17:08+01:00</updated><id>http://localhost:4000/music/guitar/2018/04/15/my-humble-attempt-at-bach-prelude-for-lute-bwv999</id><content type="html" xml:base="http://localhost:4000/music/guitar/2018/04/15/my-humble-attempt-at-bach-prelude-for-lute-bwv999.html">&lt;audio controls=&quot;&quot;&gt;
  &lt;source src=&quot;/music/Bach_Prelude_for_Lute_BWV999_20180415_150053.mp3&quot; type=&quot;audio/mpeg&quot; /&gt;
&lt;/audio&gt;

&lt;blockquote&gt;
  &lt;p&gt;Recorded during my practice. My recordings are aimed at documenting my development while learning to play guitar.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Alwyn Lombaard</name></author><summary type="html"></summary></entry><entry><title type="html">My 15 seconds of Xamarin fame</title><link href="http://localhost:4000/xamarin/2016/04/27/my-15-seconds-of-xamarin-fame.html" rel="alternate" type="text/html" title="My 15 seconds of Xamarin fame" /><published>2016-04-27T10:52:22+01:00</published><updated>2016-04-27T10:52:22+01:00</updated><id>http://localhost:4000/xamarin/2016/04/27/my-15-seconds-of-xamarin-fame</id><content type="html" xml:base="http://localhost:4000/xamarin/2016/04/27/my-15-seconds-of-xamarin-fame.html">&lt;p&gt;I got my 15 seconds of fame in the video that Xamarin made for the 2016 Xammy Award nominations.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.xamarin.com/customers/social-good&quot;&gt;It is also featured on the Xamarin customer pages.&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&quot;834&quot; height=&quot;390&quot; src=&quot;https://www.youtube.com/embed/b5D7Bv1N7lc?start=57&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Alwyn Lombaard</name></author><summary type="html">I got my 15 seconds of fame in the video that Xamarin made for the 2016 Xammy Award nominations.</summary></entry><entry><title type="html">How to serialize and deserialize an iOS device token from NSData to String and back in Xamarin.iOS</title><link href="http://localhost:4000/xamarin/ios/programming/c%23/2016/03/25/how-to-serialize-and-deserialize-an-ios-device-token-from-nsdata-to-string-and-back-in-xamarin-dot-ios.html" rel="alternate" type="text/html" title="How to serialize and deserialize an iOS device token from NSData to String and back in Xamarin.iOS" /><published>2016-03-25T18:28:08+00:00</published><updated>2016-03-25T18:28:08+00:00</updated><id>http://localhost:4000/xamarin/ios/programming/c%23/2016/03/25/how-to-serialize-and-deserialize-an-ios-device-token-from-nsdata-to-string-and-back-in-xamarin-dot-ios</id><content type="html" xml:base="http://localhost:4000/xamarin/ios/programming/c%23/2016/03/25/how-to-serialize-and-deserialize-an-ios-device-token-from-nsdata-to-string-and-back-in-xamarin-dot-ios.html">&lt;p&gt;Obtain the device token as usual when the user opts in to receive remote push notifications. Then convert it to a base64 string that can be stored and used later.&lt;/p&gt;

&lt;p&gt;Here’s how to do it. In your app delegate:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public override void RegisteredForRemoteNotifications(UIApplication application, NSData deviceToken)
{
	var tokenStringBase64 = deviceToken.GetBase64EncodedString(NSDataBase64EncodingOptions.None);
	//now you can store it for later use in local storage
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To convert it back into an NSData object that you can send to third parties (like MixPanel and ExactTarget) that require  the token as NSData:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var deviceToken = new NSData(tokenStringBase64, NSDataBase64DecodingOptions.None);

Mixpanel.SharedInstance.People.AddPushDeviceToken(deviceToken);

ETPush.PushManager.RegisterDeviceToken(deviceToken);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Alwyn Lombaard</name></author><summary type="html">Obtain the device token as usual when the user opts in to receive remote push notifications. Then convert it to a base64 string that can be stored and used later.</summary></entry><entry><title type="html">Xamarin iOS swipable multiple step process used for onboarding</title><link href="http://localhost:4000/xamarin/ios/programming/c%23/2015/10/27/xamarin-ios-swipable-multiple-step-process-used-for-onboarding.html" rel="alternate" type="text/html" title="Xamarin iOS swipable multiple step process used for onboarding" /><published>2015-10-27T21:49:01+00:00</published><updated>2015-10-27T21:49:01+00:00</updated><id>http://localhost:4000/xamarin/ios/programming/c%23/2015/10/27/xamarin-ios-swipable-multiple-step-process-used-for-onboarding</id><content type="html" xml:base="http://localhost:4000/xamarin/ios/programming/c%23/2015/10/27/xamarin-ios-swipable-multiple-step-process-used-for-onboarding.html">&lt;h3 id=&quot;the-requirement&quot;&gt;The requirement&lt;/h3&gt;

&lt;p&gt;I recently had to build an onboarding process in the JustGiving iOS app that consists
of a series of screens that can be navigated by swiping forward and backward.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/onboarding/make-good-things-happen.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/onboarding/make-good-things-happen.png&quot; alt=&quot;Step 1&quot; width=&quot;160&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/onboarding/make-good-things-happen.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/onboarding/fundraise.png&quot; alt=&quot;Step 2&quot; width=&quot;160&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/onboarding/make-good-things-happen.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/onboarding/connect.png&quot; alt=&quot;Step 3&quot; width=&quot;160&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/onboarding/make-good-things-happen.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/onboarding/discover.png&quot; alt=&quot;Step 4&quot; width=&quot;160&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/onboarding/make-good-things-happen.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/onboarding/get-started.png&quot; alt=&quot;Step 5&quot; width=&quot;160&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The solution&lt;/h3&gt;

&lt;p&gt;I used a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIPageViewController&lt;/code&gt; with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIPageViewControllerDataSource&lt;/code&gt; for navigating through steps
and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIPageControl&lt;/code&gt; for the progress indicator.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/alwynlombaard/xamarin-ios-horizontal-swipe-sample&quot;&gt;The working sample solution can be found on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;endresult&quot;&gt;The end result&lt;/h3&gt;

&lt;video controls=&quot;&quot; preload=&quot;false&quot; width=&quot;100%&quot;&gt;
   &lt;source src=&quot;/video/onboarding.mp4&quot; type=&quot;video/mp4&quot; /&gt;
&lt;/video&gt;

&lt;h3 id=&quot;steps&quot;&gt;Steps&lt;/h3&gt;

&lt;p&gt;Each step is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt; that implements the following interface.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public interface IMultiStepProcessStep : IDisposable
{
    int StepIndex { get; set; }
    event EventHandler&amp;lt;MultiStepProcessStepEventArgs&amp;gt; StepActivated;
    event EventHandler&amp;lt;MultiStepProcessStepEventArgs&amp;gt; StepDeactivated;
}


public class MultiStepProcessStepEventArgs
{
    public int Index { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;UIViewController&quot;&gt;UIViewController step&lt;/h3&gt;

&lt;p&gt;A step publishes its index when it is activated or de-activated as the active step.
This is done in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewDidAppear&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewWillDisappear&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MakeGoodthingsHappenStep : UIViewController, IMultiStepProcessStep
{
    public override void ViewDidAppear(bool animated)
    {
        base.ViewDidAppear(animated);
        StepActivated?.Invoke(this, new MultiStepProcessStepEventArgs { Index = StepIndex });
    }

    public override void ViewWillDisappear(bool animated)
    {
        base.ViewWillDisappear(animated);
        StepDeactivated?.Invoke(this, new MultiStepProcessStepEventArgs { Index = StepIndex });
    }

    public int StepIndex { get; set; }
    public event EventHandler&amp;lt;MultiStepProcessStepEventArgs&amp;gt; StepActivated;
    public event EventHandler&amp;lt;MultiStepProcessStepEventArgs&amp;gt; StepDeactivated;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;UIPageViewControllerDataSource&quot;&gt;UIPageViewControllerDataSource&lt;/h3&gt;

&lt;p&gt;The data source is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIPageViewControllerDataSource&lt;/code&gt; that is constructed with a list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IMultiStepProcessStep&lt;/code&gt; steps.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MultiStepProcessDataSource : UIPageViewControllerDataSource
{
    private readonly List&amp;lt;IMultiStepProcessStep&amp;gt; _steps;
   
    public MultiStepProcessDataSource(List&amp;lt;IMultiStepProcessStep&amp;gt; steps)
    {
        if (steps == null)
        {
          throw new ArgumentNullException(nameof(steps));
        }
        if (!steps.Any())
        {
            throw new ArgumentException(&quot;steps cannot be empty.&quot;, nameof(steps));
        }
        if (steps.Any(s =&amp;gt; !(s is UIViewController)))
        {
            throw new ArgumentException(&quot;all steps must be a UIViewController&quot;, nameof(steps));
        }

        _steps = steps;
        
        for (int i = 0; i &amp;lt; _steps.Count; i++)
        {
            var step = _steps[i];
            step.StepIndex = i;
        }
    }

    public List&amp;lt;IMultiStepProcessStep&amp;gt; Steps =&amp;gt; _steps;

    public override UIViewController GetPreviousViewController(UIPageViewController pageViewController,
        UIViewController referenceViewController)
    {
        var step = referenceViewController as IMultiStepProcessStep;
        if (step == null)
        {
            return null;
        }

        var index = _steps.IndexOf(step);
        if (index &amp;lt;= 0)
        {
            return null;
        }

        return   _steps[index - 1] as UIViewController;
    }

    public override UIViewController GetNextViewController(UIPageViewController pageViewController, 
														   UIViewController referenceViewController)
    {
        var step = referenceViewController as IMultiStepProcessStep;
        if (step == null)
        {
            return null;
        }
        var index = _steps.IndexOf(step);
        if (index + 1 == _steps.Count)
        {
            return null;
        }

        return _steps[(step.StepIndex + 1)] as UIViewController;
    }
}	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;UIPageViewController&quot;&gt;UIPageViewController&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIPageViewController&lt;/code&gt; is constructed from the data source.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public sealed class MultiStepProcessHorizontal : UIPageViewController
{
    public MultiStepProcessHorizontal(MultiStepProcessDataSource dataSource) 
		:base(UIPageViewControllerTransitionStyle.Scroll, 
			  UIPageViewControllerNavigationOrientation.Horizontal)
    {
        DataSource = dataSource;
        SetViewControllers(new[] {dataSource.Steps.FirstOrDefault() as UIViewController}, 
						   UIPageViewControllerNavigationDirection.Forward, 
						   false, 
						   null);
    }
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;UIPageControl&quot;&gt;UIPageControl&lt;/h3&gt;

&lt;p&gt;A  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIPageControl&lt;/code&gt; is used to indicate which step is active.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/onboarding/UIPageControl.png&quot; alt=&quot;UIPageControl&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;putting-it-all-together&quot;&gt;Putting it all together in the OnBoardingViewController&lt;/h3&gt;

&lt;p&gt;The event handlers for when a step is activated and de-activated are used to set the current page index
and to update any other parts of the UI as needed.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private void HandleStepActivated(object sender, MultiStepProcessStepEventArgs args)
{
	_pageControl.CurrentPage =  args.Index;
}

private void HandleStepDeactivated(object sender, MultiStepProcessStepEventArgs args)
{
	//update the UI as required while transitioning between steps
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Get the steps that form part of the process and wire them up to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StepActivated&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StepDeactivated&lt;/code&gt; events.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private List&amp;lt;IMultiStepProcessStep&amp;gt; GetSteps()
{
	var steps = new List&amp;lt;IMultiStepProcessStep&amp;gt;()
		{
			new MakeGoodthingsHappenStep(),
			new FundraiseStep(),
			new ConnectStep(),
			new DiscoverStep(),
			new GetStartedStep()
		};

	steps.ForEach(s =&amp;gt; 
	{
		s.StepActivated += HandleStepActivated;
		s.StepDeactivated += HandleStepDeactivated;
	});

	return steps;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Setup and add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIPageViewController&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIPageControl&lt;/code&gt; controls to the view.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private MultiStepProcessHorizontal _pageViewController;
private UIPageControl _pageControl;

private List&amp;lt;IMultiStepProcessStep&amp;gt; _steps;
public List&amp;lt;IMultiStepProcessStep&amp;gt; Steps =&amp;gt; _steps ?? (_steps = GetSteps());

public override void LoadView()
    {
        View = new UIView();

        _pageViewController = new MultiStepProcessHorizontal(new MultiStepProcessDataSource(Steps));

        _pageControl = new UIPageControl
            {
                CurrentPage = 0,
                Pages = Steps.Count
            };
			
		View.Add(_pageViewController.View);
        View.Add(_pageControl);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#the-requirement&quot;&gt;The requirement&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-solution&quot;&gt;The solution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#endresult&quot;&gt;The end result&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#steps&quot;&gt;Steps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#UIViewController&quot;&gt;UIViewController step&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#UIPageViewControllerDataSource&quot;&gt;UIPageViewControllerDataSource&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#UIPageViewController&quot;&gt;UIPageViewController&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#UIPageControl&quot;&gt;UIPageControl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#putting-it-all-together&quot;&gt;Putting it all together in the OnBoardingViewController&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Alwyn Lombaard</name></author><summary type="html">The requirement</summary></entry><entry><title type="html">An Irish Air</title><link href="http://localhost:4000/music/guitar/2015/10/24/an-irish-air.html" rel="alternate" type="text/html" title="An Irish Air" /><published>2015-10-24T18:46:58+01:00</published><updated>2015-10-24T18:46:58+01:00</updated><id>http://localhost:4000/music/guitar/2015/10/24/an-irish-air</id><content type="html" xml:base="http://localhost:4000/music/guitar/2015/10/24/an-irish-air.html">&lt;audio controls=&quot;&quot;&gt;
  &lt;source src=&quot;/music/An_Irish_Air_20151024_174705.mp3&quot; type=&quot;audio/mpeg&quot; /&gt;
&lt;/audio&gt;

&lt;blockquote&gt;
  &lt;p&gt;Recorded during my practice. My recordings are aimed at documenting my development while learning to play guitar.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Alwyn Lombaard</name></author><summary type="html"></summary></entry><entry><title type="html">Brouwer Study No 11</title><link href="http://localhost:4000/music/guitar/2015/10/24/brouwer-study-no-11.html" rel="alternate" type="text/html" title="Brouwer Study No 11" /><published>2015-10-24T14:29:12+01:00</published><updated>2015-10-24T14:29:12+01:00</updated><id>http://localhost:4000/music/guitar/2015/10/24/brouwer-study-no-11</id><content type="html" xml:base="http://localhost:4000/music/guitar/2015/10/24/brouwer-study-no-11.html">&lt;p&gt;One of my attempts at this study today during practice.&lt;/p&gt;

&lt;audio controls=&quot;&quot;&gt;
  &lt;source src=&quot;/music/Brouwer_Study_No_11_20151024_125532.mp3&quot; type=&quot;audio/mpeg&quot; /&gt;
&lt;/audio&gt;

&lt;blockquote&gt;
  &lt;p&gt;Recorded during my practice. My recordings are aimed at documenting my development while learning to play guitar.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Alwyn Lombaard</name></author><summary type="html">One of my attempts at this study today during practice.</summary></entry><entry><title type="html">A simple Angular audio playlist</title><link href="http://localhost:4000/angular/javascript/programming/2015/10/13/a-simple-angular-audio-playlist.html" rel="alternate" type="text/html" title="A simple Angular audio playlist" /><published>2015-10-13T21:34:45+01:00</published><updated>2015-10-13T21:34:45+01:00</updated><id>http://localhost:4000/angular/javascript/programming/2015/10/13/a-simple-angular-audio-playlist</id><content type="html" xml:base="http://localhost:4000/angular/javascript/programming/2015/10/13/a-simple-angular-audio-playlist.html">&lt;p&gt;I recently knocked out this Angular.js app to put my recordings in a playlist.&lt;/p&gt;

&lt;p&gt;You can play with it &lt;a href=&quot;/playlist&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;###The markup&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;playlist&quot; ng-app=&quot;playListApp&quot; ng-controller=&quot;playListController&quot;&amp;gt;
	&amp;lt;h2&amp;gt;Track: {{selectedTrack().name}}&amp;lt;/h2&amp;gt;
	&amp;lt;audio preload=&quot;false&quot; id=&quot;playlist-audio&quot; controls=&quot;controls&quot; width=&quot;300&quot;&amp;gt;&amp;lt;/audio&amp;gt;
	&amp;lt;div id=&quot;extra-controls&quot;&amp;gt;
		&amp;lt;button id=&quot;btnPrev&quot; class=&quot;ctrlbtn&quot; ng-click=&quot;previous()&quot;&amp;gt;|&amp;amp;lt;&amp;amp;lt; Prev Track&amp;lt;/button&amp;gt; 
		&amp;lt;button id=&quot;btnNext&quot; class=&quot;ctrlbtn&quot; ng-click=&quot;next()&quot;&amp;gt;Next Track &amp;amp;gt;&amp;amp;gt;|&amp;lt;/button&amp;gt;
	&amp;lt;/div&amp;gt;
	&amp;lt;h3&amp;gt;Playlist&amp;lt;/h3&amp;gt;
	&amp;lt;ul&amp;gt;
		&amp;lt;li class=&quot;track&quot; ng-repeat=&quot;track in tracks&quot; ng-class=&quot;{active:selectedIndex == $index}&quot; ng-click=&quot;loadTrack($index)&quot;&amp;gt;
			{{track.track}}. {{track.name}} - {{track.length}}
		&amp;lt;/li&amp;gt;
	&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;###The JavaScript&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'use strict';

(function(global) {
	var app = angular.module('playListApp', []);

	app.factory('audio', function($document) {
		var audio = $document[0].getElementById('playlist-audio');
		return audio;
	});

	global.playListController = function ($scope, audio){
		$scope.mediaPath = '/music/';
		$scope.playing = false;
		$scope.selectedIndex = 0;
		$scope.tracks = [
			{'track':1,'name':'Brouwer Study No 1','length':'01:06','file':'Brouwer_Study_No_1_20150919_182834.mp3'},
			{'track':2,'name':'Brouwer Study No 2','length':'01:10','file':'Brouwer_Study_No_2_20151004_140303.mp3'},
			{'track':3,'name':'Brouwer Study No 3','length':'00:48','file':'Brouwer_Study_No_3_20151007_214619.mp3'},
			{'track':4,'name':'Brouwer Study No 4','length':'00:48','file':'Brouwer_Study_No_4_20151008_212308.mp3'},
			{'track':5,'name':'Brouwer Study No 5','length':'01:08','file':'Brouwer_Study_No_5_20151011_150048.mp3'},
			{'track':6,'name':'Brouwer Study No 6','length':'01:31','file':'Brouwer_Study_No_6_20151010_132529.mp3'}];
		$scope.trackCount = $scope.tracks.length;
		$scope.selectedTrack = function(){ return $scope.tracks[$scope.selectedIndex]};
		$scope.audioSource = function (){return $scope.mediaPath + $scope.selectedTrack().file;};
		audio.src = $scope.audioSource();
		$scope.loadTrack = function(index) {
			$scope.selectedIndex = index;
			audio.src = $scope.audioSource();
			if($scope.playing){
				audio.play();
			}
		}
		$scope.previous = function(){
			$scope.selectedIndex--;
			$scope.selectedIndex = ($scope.selectedIndex &amp;lt; 0 ? $scope.tracks.length - 1 : $scope.selectedIndex);
			audio.src = $scope.audioSource();

			if($scope.playing){
				audio.play();
			}
		};
		$scope.next = function(){
			$scope.selectedIndex++;
			$scope.selectedIndex = ($scope.selectedIndex &amp;gt;=  $scope.tracks.length ? 0 : $scope.selectedIndex);
			audio.src = $scope.audioSource();
			if($scope.playing){
				audio.play();
			}
		};
		audio.addEventListener('play', function() {
			$scope.$apply(function(){
				$scope.playing = true;
			});
		}, false);
		audio.addEventListener('pause', function() {
			$scope.$apply(function(){
				$scope.playing = false;
			});
		}, false);
		audio.addEventListener('ended', function() {
			$scope.$apply(function(){
				if(($scope.selectedIndex + 1) === $scope.tracks.length){
					$scope.playing = false;
					$scope.selectedIndex = 0;
					audio.src = $scope.audioSource();
				}
				else{
					$scope.playing = true;
					$scope.next();
				}
			});
		}, false);
	}
})(this);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Alwyn Lombaard</name></author><summary type="html">I recently knocked out this Angular.js app to put my recordings in a playlist.</summary></entry><entry><title type="html">Brouwer Study No 6</title><link href="http://localhost:4000/music/guitar/2015/10/11/brouwer-study-no-6.html" rel="alternate" type="text/html" title="Brouwer Study No 6" /><published>2015-10-11T14:35:32+01:00</published><updated>2015-10-11T14:35:32+01:00</updated><id>http://localhost:4000/music/guitar/2015/10/11/brouwer-study-no-6</id><content type="html" xml:base="http://localhost:4000/music/guitar/2015/10/11/brouwer-study-no-6.html">&lt;p&gt;One of my attempts at this study today during practice.&lt;/p&gt;

&lt;audio controls=&quot;&quot;&gt;
  &lt;source src=&quot;/music/Brouwer_Study_No_6_20151010_132529.mp3&quot; type=&quot;audio/mpeg&quot; /&gt;
&lt;/audio&gt;

&lt;blockquote&gt;
  &lt;p&gt;Recorded during my practice. My recordings are aimed at documenting my development while learning to play guitar.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Alwyn Lombaard</name></author><summary type="html">One of my attempts at this study today during practice.</summary></entry><entry><title type="html">Brouwer Study No 5</title><link href="http://localhost:4000/music/guitar/2015/10/10/brouwer-study-no-5.html" rel="alternate" type="text/html" title="Brouwer Study No 5" /><published>2015-10-10T15:59:08+01:00</published><updated>2015-10-10T15:59:08+01:00</updated><id>http://localhost:4000/music/guitar/2015/10/10/brouwer-study-no-5</id><content type="html" xml:base="http://localhost:4000/music/guitar/2015/10/10/brouwer-study-no-5.html">&lt;p&gt;One of my attempts at this study today during practice.&lt;/p&gt;

&lt;audio controls=&quot;&quot;&gt;
  &lt;source src=&quot;/music/Brouwer_Study_No_5_20151011_150048.mp3&quot; type=&quot;audio/mpeg&quot; /&gt;
&lt;/audio&gt;

&lt;blockquote&gt;
  &lt;p&gt;Recorded during my practice. My recordings are aimed at documenting my development while learning to play guitar.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Alwyn Lombaard</name></author><summary type="html">One of my attempts at this study today during practice.</summary></entry><entry><title type="html">Brouwer Study No 4</title><link href="http://localhost:4000/music/guitar/2015/10/08/brouwer-study-no-4.html" rel="alternate" type="text/html" title="Brouwer Study No 4" /><published>2015-10-08T22:21:47+01:00</published><updated>2015-10-08T22:21:47+01:00</updated><id>http://localhost:4000/music/guitar/2015/10/08/brouwer-study-no-4</id><content type="html" xml:base="http://localhost:4000/music/guitar/2015/10/08/brouwer-study-no-4.html">&lt;audio controls=&quot;&quot;&gt;
  &lt;source src=&quot;/music/Brouwer_Study_No_4_20151008_212308.mp3&quot; type=&quot;audio/mpeg&quot; /&gt;
&lt;/audio&gt;
&lt;p&gt;Recorded during my practice. My recordings are aimed at documenting my development while learning to play guitar.&lt;/p&gt;</content><author><name>Alwyn Lombaard</name></author><summary type="html">&amp;lt;/audio</summary></entry></feed>