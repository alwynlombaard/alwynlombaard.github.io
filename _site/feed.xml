<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-10-02T11:53:19+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Alwyn Lombaardâ€™s blog</title><subtitle>Mobile developer (guitar student and athlete in my spare time)</subtitle><entry><title type="html">Xamarin.Forms AppThemeBinding markup extension</title><link href="http://localhost:4000/xamarin/2020/09/28/xamarinforms-appthemebinding.html" rel="alternate" type="text/html" title="Xamarin.Forms AppThemeBinding markup extension" /><published>2020-09-28T01:00:00+01:00</published><updated>2020-09-28T01:00:00+01:00</updated><id>http://localhost:4000/xamarin/2020/09/28/xamarinforms-appthemebinding</id><content type="html" xml:base="http://localhost:4000/xamarin/2020/09/28/xamarinforms-appthemebinding.html">&lt;p&gt;I really like the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppThemeBinding&lt;/code&gt; markup extension in Xamarin.Forms to easily handle Dark and Light modes on the mobile device. It can be used in combination with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StaticResource&lt;/code&gt; markup extension.&lt;/p&gt;

&lt;p&gt;Below is an example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BackgroundColor=&quot;{AppThemeBinding
                Light={StaticResource LightBackgroundColor},
                Dark={StaticResource DarkBackgroundColor}}&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;ContentPage.Resources&amp;gt;
    &amp;lt;Color x:Key=&quot;LightBackgroundColor&quot;&amp;gt;WhiteSmoke&amp;lt;/Color&amp;gt;
    &amp;lt;Color x:Key=&quot;DarkBackgroundColor&quot;&amp;gt;Black&amp;lt;/Color&amp;gt;
&amp;lt;/ContentPage.Resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;screen recording on iPhone Simulator&lt;/p&gt;
&lt;/blockquote&gt;
&lt;video width=&quot;300&quot; controls=&quot;&quot;&gt;
   &lt;source src=&quot;/video/appthemebinding.mov&quot; type=&quot;video/mp4&quot; /&gt;
&lt;/video&gt;</content><author><name>Alwyn Lombaard</name></author><category term="Xamarin" /><summary type="html">I really like the new AppThemeBinding markup extension in Xamarin.Forms to easily handle Dark and Light modes on the mobile device. It can be used in combination with the StaticResource markup extension.</summary></entry><entry><title type="html">Using Xamarin.Forms Shapes to notate notes on the treble clef</title><link href="http://localhost:4000/xamarin/2020/09/25/using-xamarinform-shapes-to-notate-guitar-notes.html" rel="alternate" type="text/html" title="Using Xamarin.Forms Shapes to notate notes on the treble clef" /><published>2020-09-25T01:00:00+01:00</published><updated>2020-09-25T01:00:00+01:00</updated><id>http://localhost:4000/xamarin/2020/09/25/using-xamarinform-shapes-to-notate-guitar-notes</id><content type="html" xml:base="http://localhost:4000/xamarin/2020/09/25/using-xamarinform-shapes-to-notate-guitar-notes.html">&lt;blockquote&gt;
  &lt;p&gt;screen recording on an iPhone 6s&lt;/p&gt;
&lt;/blockquote&gt;
&lt;video width=&quot;300&quot; controls=&quot;&quot;&gt;
   &lt;source src=&quot;/video/guitarnotes1.mov&quot; type=&quot;video/mp4&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;I played around with the new &lt;a href=&quot;https://docs.microsoft.com/en-us/xamarin/xamarin-forms/user-interface/shapes/&quot;&gt;Shapes&lt;/a&gt; feature in Xamarin.Forms for drawing shapes without having to use SkiaSharp.&lt;/p&gt;

&lt;p&gt;So I developed a screen using a &lt;a href=&quot;https://docs.microsoft.com/en-us/xamarin/xamarin-forms/user-interface/layouts/grid&quot;&gt;Grid&lt;/a&gt; as the canvas to draw a musical staff with treble clef and note. The range is for notes on a guitar in standard tuning up the the 12th fret on the first (bottom on the guitar) string.&lt;/p&gt;

&lt;p&gt;To make it interactive I added tap gestures to allow the user to tap on a location on the staff and find out what the note is.&lt;/p&gt;

&lt;p&gt;Here is the layout&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Grid Grid.Row=&quot;1&quot; Grid.Column=&quot;1&quot;
        VerticalOptions=&quot;StartAndExpand&quot;
        x:Name=&quot;canvas&quot;
        HeightRequest=&quot;300&quot;
        WidthRequest=&quot;250&quot;
        RowSpacing=&quot;0&quot;
        ColumnSpacing=&quot;0&quot;&amp;gt;

    &amp;lt;BoxView Grid.RowSpan=&quot;32&quot;/&amp;gt;

    &amp;lt;!--Staff--&amp;gt;
    &amp;lt;Path Grid.Row=&quot;11&quot; Stroke=&quot;Black&quot;
        Aspect=&quot;Uniform&quot;
        Grid.RowSpan=&quot;2&quot;
        StrokeThickness=&quot;2&quot;
        Data=&quot;M 0,0 L60,0&quot; /&amp;gt;

    &amp;lt;Path Grid.Row=&quot;13&quot; Stroke=&quot;Black&quot;
        Aspect=&quot;Uniform&quot;
        Grid.RowSpan=&quot;2&quot;
        StrokeThickness=&quot;2&quot;
        Data=&quot;M 0,0 L60,0&quot; /&amp;gt;

    &amp;lt;Path Grid.Row=&quot;15&quot; Stroke=&quot;Black&quot;
        Aspect=&quot;Uniform&quot;
        Grid.RowSpan=&quot;2&quot;
        StrokeThickness=&quot;2&quot;
        Data=&quot;M 0,0 L60,0&quot; /&amp;gt;

    &amp;lt;Path Grid.Row=&quot;17&quot; Stroke=&quot;Black&quot;
        Aspect=&quot;Uniform&quot;
        Grid.RowSpan=&quot;2&quot;
        StrokeThickness=&quot;2&quot;
        Data=&quot;M 0,0 L60,0&quot; /&amp;gt;

    &amp;lt;Path Grid.Row=&quot;19&quot; Stroke=&quot;Black&quot;
        Aspect=&quot;Uniform&quot;
        Grid.RowSpan=&quot;2&quot;
        StrokeThickness=&quot;2&quot;
        Data=&quot;M 0,0 L60,0&quot; /&amp;gt;

    &amp;lt;!--Bar line--&amp;gt;
    &amp;lt;Path Grid.Row=&quot;12&quot; Stroke=&quot;Black&quot;
        Aspect=&quot;Uniform&quot;
        Grid.RowSpan=&quot;8&quot;
        HorizontalOptions=&quot;EndAndExpand&quot;
        StrokeThickness=&quot;2&quot;
        Data=&quot;M 3,0 L 3,60&quot; /&amp;gt;

    &amp;lt;!--Top ledger lines--&amp;gt;
    &amp;lt;Path WidthRequest=&quot;{Binding LedgerLineWidth}&quot;
        Data=&quot;M 0,0 L60,0&quot;
        Grid.Row=&quot;5&quot;
        Grid.RowSpan=&quot;2&quot;
        Stroke=&quot;Black&quot;
        StrokeThickness=&quot;1&quot;
        Aspect=&quot;Uniform&quot;
        HorizontalOptions=&quot;Center&quot;/&amp;gt;
    
        &amp;lt;Path WidthRequest=&quot;{Binding LedgerLineWidth}&quot;
        Data=&quot;M 0,0 L60,0&quot;
        Grid.Row=&quot;7&quot;
        Grid.RowSpan=&quot;2&quot;
        Stroke=&quot;Black&quot;
        StrokeThickness=&quot;1&quot;
        Aspect=&quot;Uniform&quot;
        HorizontalOptions=&quot;Center&quot;/&amp;gt;

        &amp;lt;Path WidthRequest=&quot;{Binding LedgerLineWidth}&quot;
        Data=&quot;M 0,0 L60,0&quot;
        Grid.Row=&quot;9&quot;
        Grid.RowSpan=&quot;2&quot;
        Stroke=&quot;Black&quot;
        StrokeThickness=&quot;1&quot;
        Aspect=&quot;Uniform&quot;
        HorizontalOptions=&quot;Center&quot;/&amp;gt;

    &amp;lt;!--Botttom ledger lines--&amp;gt;
    &amp;lt;Path WidthRequest=&quot;{Binding LedgerLineWidth}&quot;
        Data=&quot;M 0,0 L60,0&quot;
        Grid.Row=&quot;21&quot;
        Grid.RowSpan=&quot;2&quot;
        Stroke=&quot;Black&quot;
        StrokeThickness=&quot;1&quot;
        Aspect=&quot;Uniform&quot;
        HorizontalOptions=&quot;Center&quot;/&amp;gt;

        &amp;lt;Path WidthRequest=&quot;{Binding LedgerLineWidth}&quot;
        Data=&quot;M 0,0 L60,0&quot;
        Grid.Row=&quot;23&quot;
        Grid.RowSpan=&quot;2&quot;
        Stroke=&quot;Black&quot;
        StrokeThickness=&quot;1&quot;
        Aspect=&quot;Uniform&quot;
        HorizontalOptions=&quot;Center&quot;/&amp;gt;

        &amp;lt;Path WidthRequest=&quot;{Binding LedgerLineWidth}&quot;
        Data=&quot;M 0,0 L60,0&quot;
        Grid.Row=&quot;25&quot;
        Grid.RowSpan=&quot;2&quot;
        Stroke=&quot;Black&quot;
        StrokeThickness=&quot;1&quot;
        Aspect=&quot;Uniform&quot;
        HorizontalOptions=&quot;Center&quot;/&amp;gt;

    &amp;lt;!--Treble clef--&amp;gt;
    &amp;lt;Path
        WidthRequest=&quot;{Binding TrebleWidth}&quot;
        Grid.Row=&quot;8&quot;
        Grid.RowSpan=&quot;16&quot;
        Data=&quot;M 2002,7851 C 1941,7868 1886,7906 1835,7964 C 1784,8023 1759,8088 1759,8158 C 1759,8202 1774,8252 1803,8305 C 1832,8359 1876,8398 1933,8423 C 1952,8427 1961,8437 1961,8451 C 1961,8456 1954,8461 1937,8465 C 1846,8442 1771,8393 1713,8320 C 1655,8246 1625,8162 1623,8066 C 1626,7963 1657,7867 1716,7779 C 1776,7690 1853,7627 1947,7590 L 1878,7235 C 1724,7363 1599,7496 1502,7636 C 1405,7775 1355,7926 1351,8089 C 1353,8162 1368,8233 1396,8301 C 1424,8370 1466,8432 1522,8489 C 1635,8602 1782,8661 1961,8667 C 2022,8663 2087,8652 2157,8634 L 2002,7851 z M 2074,7841 L 2230,8610 C 2384,8548 2461,8413 2461,8207 C 2452,8138 2432,8076 2398,8021 C 2365,7965 2321,7921 2265,7889 C 2209,7857 2146,7841 2074,7841 z M 1869,6801 C 1902,6781 1940,6746 1981,6697 C 2022,6649 2062,6592 2100,6528 C 2139,6463 2170,6397 2193,6330 C 2216,6264 2227,6201 2227,6143 C 2227,6118 2225,6093 2220,6071 C 2216,6035 2205,6007 2186,5988 C 2167,5970 2143,5960 2113,5960 C 2053,5960 1999,5997 1951,6071 C 1914,6135 1883,6211 1861,6297 C 1838,6384 1825,6470 1823,6557 C 1828,6656 1844,6737 1869,6801 z M 1806,6859 C 1761,6697 1736,6532 1731,6364 C 1732,6256 1743,6155 1764,6061 C 1784,5967 1813,5886 1851,5816 C 1888,5746 1931,5693 1979,5657 C 2022,5625 2053,5608 2070,5608 C 2083,5608 2094,5613 2104,5622 C 2114,5631 2127,5646 2143,5666 C 2262,5835 2322,6039 2322,6277 C 2322,6390 2307,6500 2277,6610 C 2248,6719 2205,6823 2148,6920 C 2090,7018 2022,7103 1943,7176 L 2024,7570 C 2068,7565 2098,7561 2115,7561 C 2191,7561 2259,7577 2322,7609 C 2385,7641 2439,7684 2483,7739 C 2527,7793 2561,7855 2585,7925 C 2608,7995 2621,8068 2621,8144 C 2621,8262 2590,8370 2528,8467 C 2466,8564 2373,8635 2248,8681 C 2256,8730 2270,8801 2291,8892 C 2311,8984 2326,9057 2336,9111 C 2346,9165 2350,9217 2350,9268 C 2350,9347 2331,9417 2293,9479 C 2254,9541 2202,9589 2136,9623 C 2071,9657 1999,9674 1921,9674 C 1811,9674 1715,9643 1633,9582 C 1551,9520 1507,9437 1503,9331 C 1506,9284 1517,9240 1537,9198 C 1557,9156 1584,9122 1619,9096 C 1653,9069 1694,9055 1741,9052 C 1780,9052 1817,9063 1852,9084 C 1886,9106 1914,9135 1935,9172 C 1955,9209 1966,9250 1966,9294 C 1966,9353 1946,9403 1906,9444 C 1866,9485 1815,9506 1754,9506 L 1731,9506 C 1770,9566 1834,9597 1923,9597 C 1968,9597 2014,9587 2060,9569 C 2107,9550 2146,9525 2179,9493 C 2212,9461 2234,9427 2243,9391 C 2260,9350 2268,9293 2268,9222 C 2268,9174 2263,9126 2254,9078 C 2245,9031 2231,8968 2212,8890 C 2193,8813 2179,8753 2171,8712 C 2111,8727 2049,8735 1984,8735 C 1875,8735 1772,8713 1675,8668 C 1578,8623 1493,8561 1419,8481 C 1346,8401 1289,8311 1248,8209 C 1208,8108 1187,8002 1186,7892 C 1190,7790 1209,7692 1245,7600 C 1281,7507 1327,7419 1384,7337 C 1441,7255 1500,7180 1561,7113 C 1623,7047 1704,6962 1806,6859 z&quot;
        Stroke=&quot;Black&quot;
        Fill=&quot;Black&quot;
        StrokeThickness=&quot;1&quot;
        Aspect=&quot;Uniform&quot;
        VerticalOptions=&quot;CenterAndExpand&quot;
        HorizontalOptions=&quot;Start&quot;
        Margin=&quot;10,0&quot;
        /&amp;gt;

    &amp;lt;!--note--&amp;gt;
    &amp;lt;Path
        x:Name=&quot;note&quot;
        Data=&quot;M 36.425204,104.88119 C 25.756184,104.88119 17.112704,110.07537 17.112704,116.44369 C 17.112704,122.81202 25.756194,127.97497 36.425204,127.97494 C 47.094224,127.97494 55.768944,122.81202 55.768954,116.44369 C 55.768954,110.07536 47.094224,104.88117 36.425204,104.88119 z M 31.706454,106.97494 C 34.480794,106.93885 37.898804,108.02436 41.112704,110.19369 C 46.826304,114.05026 49.692844,119.85839 47.518954,123.13119 C 45.345074,126.40401 38.951304,125.92527 33.237704,122.06869 C 27.524114,118.21212 24.657564,112.40399 26.831454,109.13119 C 27.782534,107.69933 29.548634,107.00301 31.706454,106.97494 z &quot;
        Stroke=&quot;Black&quot;
        Fill=&quot;Black&quot;
        StrokeThickness=&quot;1&quot;
        Aspect=&quot;Uniform&quot;
        Grid.Row=&quot;21&quot;
        Grid.RowSpan=&quot;2&quot;
        HorizontalOptions=&quot;Center&quot;/&amp;gt;
&amp;lt;/Grid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Alwyn Lombaard</name></author><category term="Xamarin" /><summary type="html">screen recording on an iPhone 6s</summary></entry><entry><title type="html">My humble attempt at Bach Prelude for Lute BWV999</title><link href="http://localhost:4000/guitar/2018/04/15/my-humble-attempt-at-bach-prelude-for-lute-bwv999.html" rel="alternate" type="text/html" title="My humble attempt at Bach Prelude for Lute BWV999" /><published>2018-04-15T16:17:08+01:00</published><updated>2018-04-15T16:17:08+01:00</updated><id>http://localhost:4000/guitar/2018/04/15/my-humble-attempt-at-bach-prelude-for-lute-bwv999</id><content type="html" xml:base="http://localhost:4000/guitar/2018/04/15/my-humble-attempt-at-bach-prelude-for-lute-bwv999.html">&lt;audio controls=&quot;&quot;&gt;
  &lt;source src=&quot;/music/Bach_Prelude_for_Lute_BWV999_20180415_150053.mp3&quot; type=&quot;audio/mpeg&quot; /&gt;
&lt;/audio&gt;

&lt;blockquote&gt;
  &lt;p&gt;Recorded during my practice. My recordings are aimed at documenting my development while learning to play guitar.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Alwyn Lombaard</name></author><summary type="html"></summary></entry><entry><title type="html">My 15 seconds of Xamarin fame</title><link href="http://localhost:4000/xamarin/2016/04/27/my-15-seconds-of-xamarin-fame.html" rel="alternate" type="text/html" title="My 15 seconds of Xamarin fame" /><published>2016-04-27T10:52:22+01:00</published><updated>2016-04-27T10:52:22+01:00</updated><id>http://localhost:4000/xamarin/2016/04/27/my-15-seconds-of-xamarin-fame</id><content type="html" xml:base="http://localhost:4000/xamarin/2016/04/27/my-15-seconds-of-xamarin-fame.html">&lt;iframe width=&quot;100%&quot; height=&quot;390&quot; src=&quot;https://www.youtube.com/embed/b5D7Bv1N7lc?start=30&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;I got my 15 seconds of fame in the video that Xamarin made for the 2016 Xammy Award nominations.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.xamarin.com/customers/social-good&quot;&gt;It is also featured on the Xamarin customer pages.&lt;/a&gt;&lt;/p&gt;</content><author><name>Alwyn Lombaard</name></author><summary type="html"></summary></entry><entry><title type="html">How to serialize and deserialize an iOS device token from NSData to String and back in Xamarin.iOS</title><link href="http://localhost:4000/xamarin/2016/03/25/how-to-serialize-and-deserialize-an-ios-device-token-from-nsdata-to-string-and-back-in-xamarin-dot-ios.html" rel="alternate" type="text/html" title="How to serialize and deserialize an iOS device token from NSData to String and back in Xamarin.iOS" /><published>2016-03-25T18:28:08+00:00</published><updated>2016-03-25T18:28:08+00:00</updated><id>http://localhost:4000/xamarin/2016/03/25/how-to-serialize-and-deserialize-an-ios-device-token-from-nsdata-to-string-and-back-in-xamarin-dot-ios</id><content type="html" xml:base="http://localhost:4000/xamarin/2016/03/25/how-to-serialize-and-deserialize-an-ios-device-token-from-nsdata-to-string-and-back-in-xamarin-dot-ios.html">&lt;p&gt;Obtain the device token as usual when the user opts in to receive remote push notifications. Then convert it to a base64 string that can be stored and used later.&lt;/p&gt;

&lt;p&gt;Hereâ€™s how to do it. In your app delegate:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public override void RegisteredForRemoteNotifications(UIApplication application, NSData deviceToken)
{
	var tokenStringBase64 = deviceToken.GetBase64EncodedString(NSDataBase64EncodingOptions.None);
	//now you can store it for later use in local storage
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To convert it back into an NSData object that you can send to third parties (like MixPanel and ExactTarget) that require  the token as NSData:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var deviceToken = new NSData(tokenStringBase64, NSDataBase64DecodingOptions.None);

Mixpanel.SharedInstance.People.AddPushDeviceToken(deviceToken);

ETPush.PushManager.RegisterDeviceToken(deviceToken);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Alwyn Lombaard</name></author><category term="Xamarin" /><category term="iOS" /><category term="programming" /><category term="C#" /><summary type="html">Obtain the device token as usual when the user opts in to receive remote push notifications. Then convert it to a base64 string that can be stored and used later.</summary></entry><entry><title type="html">Xamarin iOS swipable multiple step process used for onboarding</title><link href="http://localhost:4000/xamarin/2015/10/27/xamarin-ios-swipable-multiple-step-process-used-for-onboarding.html" rel="alternate" type="text/html" title="Xamarin iOS swipable multiple step process used for onboarding" /><published>2015-10-27T21:49:01+00:00</published><updated>2015-10-27T21:49:01+00:00</updated><id>http://localhost:4000/xamarin/2015/10/27/xamarin-ios-swipable-multiple-step-process-used-for-onboarding</id><content type="html" xml:base="http://localhost:4000/xamarin/2015/10/27/xamarin-ios-swipable-multiple-step-process-used-for-onboarding.html">&lt;h3 id=&quot;the-requirement&quot;&gt;The requirement&lt;/h3&gt;

&lt;p&gt;I recently had to build an onboarding process in the JustGiving iOS app that consists
of a series of screens that can be navigated by swiping forward and backward.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/onboarding/make-good-things-happen.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/onboarding/make-good-things-happen.png&quot; alt=&quot;Step 1&quot; width=&quot;160&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/onboarding/make-good-things-happen.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/onboarding/fundraise.png&quot; alt=&quot;Step 2&quot; width=&quot;160&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/onboarding/make-good-things-happen.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/onboarding/connect.png&quot; alt=&quot;Step 3&quot; width=&quot;160&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/onboarding/make-good-things-happen.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/onboarding/discover.png&quot; alt=&quot;Step 4&quot; width=&quot;160&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/onboarding/make-good-things-happen.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/onboarding/get-started.png&quot; alt=&quot;Step 5&quot; width=&quot;160&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The solution&lt;/h3&gt;

&lt;p&gt;I used a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIPageViewController&lt;/code&gt; with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIPageViewControllerDataSource&lt;/code&gt; for navigating through steps
and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIPageControl&lt;/code&gt; for the progress indicator.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/alwynlombaard/xamarin-ios-horizontal-swipe-sample&quot;&gt;The working sample solution can be found on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;endresult&quot;&gt;The end result&lt;/h3&gt;

&lt;video controls=&quot;&quot; preload=&quot;false&quot; width=&quot;100%&quot;&gt;
   &lt;source src=&quot;/video/onboarding.mp4&quot; type=&quot;video/mp4&quot; /&gt;
&lt;/video&gt;

&lt;h3 id=&quot;steps&quot;&gt;Steps&lt;/h3&gt;

&lt;p&gt;Each step is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt; that implements the following interface.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public interface IMultiStepProcessStep : IDisposable
{
    int StepIndex { get; set; }
    event EventHandler&amp;lt;MultiStepProcessStepEventArgs&amp;gt; StepActivated;
    event EventHandler&amp;lt;MultiStepProcessStepEventArgs&amp;gt; StepDeactivated;
}


public class MultiStepProcessStepEventArgs
{
    public int Index { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;UIViewController&quot;&gt;UIViewController step&lt;/h3&gt;

&lt;p&gt;A step publishes its index when it is activated or de-activated as the active step.
This is done in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewDidAppear&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewWillDisappear&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MakeGoodthingsHappenStep : UIViewController, IMultiStepProcessStep
{
    public override void ViewDidAppear(bool animated)
    {
        base.ViewDidAppear(animated);
        StepActivated?.Invoke(this, new MultiStepProcessStepEventArgs { Index = StepIndex });
    }

    public override void ViewWillDisappear(bool animated)
    {
        base.ViewWillDisappear(animated);
        StepDeactivated?.Invoke(this, new MultiStepProcessStepEventArgs { Index = StepIndex });
    }

    public int StepIndex { get; set; }
    public event EventHandler&amp;lt;MultiStepProcessStepEventArgs&amp;gt; StepActivated;
    public event EventHandler&amp;lt;MultiStepProcessStepEventArgs&amp;gt; StepDeactivated;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;UIPageViewControllerDataSource&quot;&gt;UIPageViewControllerDataSource&lt;/h3&gt;

&lt;p&gt;The data source is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIPageViewControllerDataSource&lt;/code&gt; that is constructed with a list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IMultiStepProcessStep&lt;/code&gt; steps.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MultiStepProcessDataSource : UIPageViewControllerDataSource
{
    private readonly List&amp;lt;IMultiStepProcessStep&amp;gt; _steps;
   
    public MultiStepProcessDataSource(List&amp;lt;IMultiStepProcessStep&amp;gt; steps)
    {
        if (steps == null)
        {
          throw new ArgumentNullException(nameof(steps));
        }
        if (!steps.Any())
        {
            throw new ArgumentException(&quot;steps cannot be empty.&quot;, nameof(steps));
        }
        if (steps.Any(s =&amp;gt; !(s is UIViewController)))
        {
            throw new ArgumentException(&quot;all steps must be a UIViewController&quot;, nameof(steps));
        }

        _steps = steps;
        
        for (int i = 0; i &amp;lt; _steps.Count; i++)
        {
            var step = _steps[i];
            step.StepIndex = i;
        }
    }

    public List&amp;lt;IMultiStepProcessStep&amp;gt; Steps =&amp;gt; _steps;

    public override UIViewController GetPreviousViewController(UIPageViewController pageViewController,
        UIViewController referenceViewController)
    {
        var step = referenceViewController as IMultiStepProcessStep;
        if (step == null)
        {
            return null;
        }

        var index = _steps.IndexOf(step);
        if (index &amp;lt;= 0)
        {
            return null;
        }

        return   _steps[index - 1] as UIViewController;
    }

    public override UIViewController GetNextViewController(UIPageViewController pageViewController, 
														   UIViewController referenceViewController)
    {
        var step = referenceViewController as IMultiStepProcessStep;
        if (step == null)
        {
            return null;
        }
        var index = _steps.IndexOf(step);
        if (index + 1 == _steps.Count)
        {
            return null;
        }

        return _steps[(step.StepIndex + 1)] as UIViewController;
    }
}	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;UIPageViewController&quot;&gt;UIPageViewController&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIPageViewController&lt;/code&gt; is constructed from the data source.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public sealed class MultiStepProcessHorizontal : UIPageViewController
{
    public MultiStepProcessHorizontal(MultiStepProcessDataSource dataSource) 
		:base(UIPageViewControllerTransitionStyle.Scroll, 
			  UIPageViewControllerNavigationOrientation.Horizontal)
    {
        DataSource = dataSource;
        SetViewControllers(new[] {dataSource.Steps.FirstOrDefault() as UIViewController}, 
						   UIPageViewControllerNavigationDirection.Forward, 
						   false, 
						   null);
    }
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;UIPageControl&quot;&gt;UIPageControl&lt;/h3&gt;

&lt;p&gt;A  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIPageControl&lt;/code&gt; is used to indicate which step is active.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/onboarding/UIPageControl.png&quot; alt=&quot;UIPageControl&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;putting-it-all-together&quot;&gt;Putting it all together in the OnBoardingViewController&lt;/h3&gt;

&lt;p&gt;The event handlers for when a step is activated and de-activated are used to set the current page index
and to update any other parts of the UI as needed.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private void HandleStepActivated(object sender, MultiStepProcessStepEventArgs args)
{
	_pageControl.CurrentPage =  args.Index;
}

private void HandleStepDeactivated(object sender, MultiStepProcessStepEventArgs args)
{
	//update the UI as required while transitioning between steps
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Get the steps that form part of the process and wire them up to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StepActivated&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StepDeactivated&lt;/code&gt; events.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private List&amp;lt;IMultiStepProcessStep&amp;gt; GetSteps()
{
	var steps = new List&amp;lt;IMultiStepProcessStep&amp;gt;()
		{
			new MakeGoodthingsHappenStep(),
			new FundraiseStep(),
			new ConnectStep(),
			new DiscoverStep(),
			new GetStartedStep()
		};

	steps.ForEach(s =&amp;gt; 
	{
		s.StepActivated += HandleStepActivated;
		s.StepDeactivated += HandleStepDeactivated;
	});

	return steps;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Setup and add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIPageViewController&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIPageControl&lt;/code&gt; controls to the view.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private MultiStepProcessHorizontal _pageViewController;
private UIPageControl _pageControl;

private List&amp;lt;IMultiStepProcessStep&amp;gt; _steps;
public List&amp;lt;IMultiStepProcessStep&amp;gt; Steps =&amp;gt; _steps ?? (_steps = GetSteps());

public override void LoadView()
    {
        View = new UIView();

        _pageViewController = new MultiStepProcessHorizontal(new MultiStepProcessDataSource(Steps));

        _pageControl = new UIPageControl
            {
                CurrentPage = 0,
                Pages = Steps.Count
            };
			
		View.Add(_pageViewController.View);
        View.Add(_pageControl);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#the-requirement&quot;&gt;The requirement&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-solution&quot;&gt;The solution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#endresult&quot;&gt;The end result&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#steps&quot;&gt;Steps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#UIViewController&quot;&gt;UIViewController step&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#UIPageViewControllerDataSource&quot;&gt;UIPageViewControllerDataSource&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#UIPageViewController&quot;&gt;UIPageViewController&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#UIPageControl&quot;&gt;UIPageControl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#putting-it-all-together&quot;&gt;Putting it all together in the OnBoardingViewController&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Alwyn Lombaard</name></author><category term="Xamarin" /><category term="iOS" /><category term="programming" /><category term="C#" /><summary type="html">The requirement</summary></entry><entry><title type="html">Brouwer Study No 11</title><link href="http://localhost:4000/guitar/2015/10/24/brouwer-study-no-11.html" rel="alternate" type="text/html" title="Brouwer Study No 11" /><published>2015-10-24T14:29:12+01:00</published><updated>2015-10-24T14:29:12+01:00</updated><id>http://localhost:4000/guitar/2015/10/24/brouwer-study-no-11</id><content type="html" xml:base="http://localhost:4000/guitar/2015/10/24/brouwer-study-no-11.html">&lt;audio controls=&quot;&quot;&gt;
  &lt;source src=&quot;/music/Brouwer_Study_No_11_20151024_125532.mp3&quot; type=&quot;audio/mpeg&quot; /&gt;
&lt;/audio&gt;

&lt;p&gt;One of my attempts at this study today during practice.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Recorded during my practice. My recordings are aimed at documenting my development while learning to play guitar.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Alwyn Lombaard</name></author><summary type="html"></summary></entry><entry><title type="html">A simple Angular audio playlist</title><link href="http://localhost:4000/angular/guitar/2015/10/13/a-simple-angular-audio-playlist.html" rel="alternate" type="text/html" title="A simple Angular audio playlist" /><published>2015-10-13T21:34:45+01:00</published><updated>2015-10-13T21:34:45+01:00</updated><id>http://localhost:4000/angular/guitar/2015/10/13/a-simple-angular-audio-playlist</id><content type="html" xml:base="http://localhost:4000/angular/guitar/2015/10/13/a-simple-angular-audio-playlist.html">&lt;p&gt;I recently knocked out this Angular.js app to put my recordings in a playlist.&lt;/p&gt;

&lt;p&gt;You can play with it &lt;a href=&quot;/playlist&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-markup&quot;&gt;The markup&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;playlist&quot; ng-app=&quot;playListApp&quot; ng-controller=&quot;playListController&quot;&amp;gt;
	&amp;lt;h2&amp;gt;Track: {{selectedTrack().name}}&amp;lt;/h2&amp;gt;
	&amp;lt;audio preload=&quot;false&quot; id=&quot;playlist-audio&quot; controls=&quot;controls&quot; width=&quot;300&quot;&amp;gt;&amp;lt;/audio&amp;gt;
	&amp;lt;div id=&quot;extra-controls&quot;&amp;gt;
		&amp;lt;button id=&quot;btnPrev&quot; class=&quot;ctrlbtn&quot; ng-click=&quot;previous()&quot;&amp;gt;|&amp;amp;lt;&amp;amp;lt; Prev Track&amp;lt;/button&amp;gt; 
		&amp;lt;button id=&quot;btnNext&quot; class=&quot;ctrlbtn&quot; ng-click=&quot;next()&quot;&amp;gt;Next Track &amp;amp;gt;&amp;amp;gt;|&amp;lt;/button&amp;gt;
	&amp;lt;/div&amp;gt;
	&amp;lt;h3&amp;gt;Playlist&amp;lt;/h3&amp;gt;
	&amp;lt;ul&amp;gt;
		&amp;lt;li class=&quot;track&quot; ng-repeat=&quot;track in tracks&quot; ng-class=&quot;{active:selectedIndex == $index}&quot; ng-click=&quot;loadTrack($index)&quot;&amp;gt;
			{{track.track}}. {{track.name}} - {{track.length}}
		&amp;lt;/li&amp;gt;
	&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-javascript&quot;&gt;The JavaScript&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'use strict';

(function(global) {
	var app = angular.module('playListApp', []);

	app.factory('audio', function($document) {
		var audio = $document[0].getElementById('playlist-audio');
		return audio;
	});

	global.playListController = function ($scope, audio){
		$scope.mediaPath = '/music/';
		$scope.playing = false;
		$scope.selectedIndex = 0;
		$scope.tracks = [
			{'track':1,'name':'Brouwer Study No 1','length':'01:06','file':'Brouwer_Study_No_1_20150919_182834.mp3'},
			{'track':2,'name':'Brouwer Study No 2','length':'01:10','file':'Brouwer_Study_No_2_20151004_140303.mp3'},
			{'track':3,'name':'Brouwer Study No 3','length':'00:48','file':'Brouwer_Study_No_3_20151007_214619.mp3'},
			{'track':4,'name':'Brouwer Study No 4','length':'00:48','file':'Brouwer_Study_No_4_20151008_212308.mp3'},
			{'track':5,'name':'Brouwer Study No 5','length':'01:08','file':'Brouwer_Study_No_5_20151011_150048.mp3'},
			{'track':6,'name':'Brouwer Study No 6','length':'01:31','file':'Brouwer_Study_No_6_20151010_132529.mp3'}];
		$scope.trackCount = $scope.tracks.length;
		$scope.selectedTrack = function(){ return $scope.tracks[$scope.selectedIndex]};
		$scope.audioSource = function (){return $scope.mediaPath + $scope.selectedTrack().file;};
		audio.src = $scope.audioSource();
		$scope.loadTrack = function(index) {
			$scope.selectedIndex = index;
			audio.src = $scope.audioSource();
			if($scope.playing){
				audio.play();
			}
		}
		$scope.previous = function(){
			$scope.selectedIndex--;
			$scope.selectedIndex = ($scope.selectedIndex &amp;lt; 0 ? $scope.tracks.length - 1 : $scope.selectedIndex);
			audio.src = $scope.audioSource();

			if($scope.playing){
				audio.play();
			}
		};
		$scope.next = function(){
			$scope.selectedIndex++;
			$scope.selectedIndex = ($scope.selectedIndex &amp;gt;=  $scope.tracks.length ? 0 : $scope.selectedIndex);
			audio.src = $scope.audioSource();
			if($scope.playing){
				audio.play();
			}
		};
		audio.addEventListener('play', function() {
			$scope.$apply(function(){
				$scope.playing = true;
			});
		}, false);
		audio.addEventListener('pause', function() {
			$scope.$apply(function(){
				$scope.playing = false;
			});
		}, false);
		audio.addEventListener('ended', function() {
			$scope.$apply(function(){
				if(($scope.selectedIndex + 1) === $scope.tracks.length){
					$scope.playing = false;
					$scope.selectedIndex = 0;
					audio.src = $scope.audioSource();
				}
				else{
					$scope.playing = true;
					$scope.next();
				}
			});
		}, false);
	}
})(this);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Alwyn Lombaard</name></author><summary type="html">I recently knocked out this Angular.js app to put my recordings in a playlist.</summary></entry><entry><title type="html">Training session jump</title><link href="http://localhost:4000/athletics/2015/06/09/training-session-jump.html" rel="alternate" type="text/html" title="Training session jump" /><published>2015-06-09T11:31:55+01:00</published><updated>2015-06-09T11:31:55+01:00</updated><id>http://localhost:4000/athletics/2015/06/09/training-session-jump</id><content type="html" xml:base="http://localhost:4000/athletics/2015/06/09/training-session-jump.html">&lt;p&gt;Screwed up the most important part of the runup. The curve and the last 3 strides (and pretty much the entire runup).&lt;/p&gt;
&lt;video width=&quot;100%&quot; controls=&quot;&quot;&gt;
   &lt;source src=&quot;/video/9-June-2015.mp4&quot; type=&quot;video/mp4&quot; /&gt;
&lt;/video&gt;</content><author><name>Alwyn Lombaard</name></author><summary type="html">Screwed up the most important part of the runup. The curve and the last 3 strides (and pretty much the entire runup).</summary></entry><entry><title type="html">A jump</title><link href="http://localhost:4000/athletics/2015/03/27/a-jump.html" rel="alternate" type="text/html" title="A jump" /><published>2015-03-27T11:53:17+00:00</published><updated>2015-03-27T11:53:17+00:00</updated><id>http://localhost:4000/athletics/2015/03/27/a-jump</id><content type="html" xml:base="http://localhost:4000/athletics/2015/03/27/a-jump.html">&lt;video width=&quot;100%&quot; controls=&quot;&quot;&gt;
   &lt;source src=&quot;/video/clearance2.mp4&quot; type=&quot;video/mp4&quot; /&gt;
&lt;/video&gt;</content><author><name>Alwyn Lombaard</name></author><summary type="html"></summary></entry></feed>